#*****************************************************************************************
# Vivado (TM) v2019.2 (64-bit)
#
# rebuild.tcl: Tcl script for re-creating project 'robot_car_hardware'
#
# Generated by Vivado on Thu Mar 09 03:05:51 -0800 2023
# IP Build 2700528 on Thu Nov  7 00:09:20 MST 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (rebuild.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "C:/Users/knowa/AppData/Roaming/Xilinx/Vivado/robot_car/hardware/hdl/nexysa7fpga.v"
#    "C:/Users/knowa/AppData/Roaming/Xilinx/Vivado/robot_car/hardware/hdl/rgbPWM_r2.v"
#    "C:/Users/knowa/AppData/Roaming/Xilinx/Vivado/robot_car/hardware/IP/bd/embsys/hdl/embsys_wrapper.v"
#    "C:/Users/knowa/AppData/Roaming/Xilinx/Vivado/robot_car/hardware/xdc/nexysA7fpga.xdc"
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "robot_car_hardware"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "rebuild.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/robot_car_hardware"]"

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7a100tcsg324-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part_repo_paths" -value "[file normalize "$origin_dir/../../2019.2/xhub/board_store"]" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "18" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "18" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "18" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "18" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "18" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "18" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "18" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "18" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
set_property "ip_repo_paths" "[file normalize "$origin_dir/IP/ece544ip_w23"]" $obj

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/hdl/nexysa7fpga.v"] \
 [file normalize "${origin_dir}/hdl/rgbPWM_r2.v"] \
 [file normalize "${origin_dir}/IP/bd/embsys/hdl/embsys_wrapper.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "nexysa7fpga" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/xdc/nexysA7fpga.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/xdc/nexysA7fpga.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7a100tcsg324-1" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "nexysa7fpga" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added


# Proc to create BD embsys
proc cr_bd_embsys { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name embsys

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  pdx.edu:user:PmodENC544:1.0\
  xilinx.com:ip:axi_timebase_wdt:3.0\
  xilinx.com:ip:axi_uartlite:2.0\
  xilinx.com:ip:clk_wiz:6.0\
  xilinx.com:ip:fit_timer:2.0\
  xilinx.com:ip:mdm:3.2\
  xilinx.com:ip:microblaze:11.0\
  xilinx.com:ip:axi_intc:4.1\
  xilinx.com:ip:xlconcat:2.1\
  xilinx.com:user:myHB3ip:1.0\
  pdx.edu:user:nexys4io:3_0\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:lmb_bram_if_cntlr:4.0\
  xilinx.com:ip:lmb_v10:3.0\
  xilinx.com:ip:blk_mem_gen:8.4\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: microblaze_0_local_memory
proc create_hier_cell_microblaze_0_local_memory { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_microblaze_0_local_memory() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 DLMB

  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 ILMB


  # Create pins
  create_bd_pin -dir I -type clk LMB_Clk
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: dlmb_bram_if_cntlr, and set properties
  set dlmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 dlmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $dlmb_bram_if_cntlr

  # Create instance: dlmb_v10, and set properties
  set dlmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 dlmb_v10 ]

  # Create instance: ilmb_bram_if_cntlr, and set properties
  set ilmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 ilmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $ilmb_bram_if_cntlr

  # Create instance: ilmb_v10, and set properties
  set ilmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 ilmb_v10 ]

  # Create instance: lmb_bram, and set properties
  set lmb_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 lmb_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.use_bram_block {BRAM_Controller} \
 ] $lmb_bram

  # Create interface connections
  connect_bd_intf_net -intf_net microblaze_0_dlmb [get_bd_intf_pins DLMB] [get_bd_intf_pins dlmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_bus [get_bd_intf_pins dlmb_bram_if_cntlr/SLMB] [get_bd_intf_pins dlmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_cntlr [get_bd_intf_pins dlmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net microblaze_0_ilmb [get_bd_intf_pins ILMB] [get_bd_intf_pins ilmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_bus [get_bd_intf_pins ilmb_bram_if_cntlr/SLMB] [get_bd_intf_pins ilmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_cntlr [get_bd_intf_pins ilmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTB]

  # Create port connections
  connect_bd_net -net SYS_Rst_1 [get_bd_pins SYS_Rst] [get_bd_pins dlmb_bram_if_cntlr/LMB_Rst] [get_bd_pins dlmb_v10/SYS_Rst] [get_bd_pins ilmb_bram_if_cntlr/LMB_Rst] [get_bd_pins ilmb_v10/SYS_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins LMB_Clk] [get_bd_pins dlmb_bram_if_cntlr/LMB_Clk] [get_bd_pins dlmb_v10/LMB_Clk] [get_bd_pins ilmb_bram_if_cntlr/LMB_Clk] [get_bd_pins ilmb_v10/LMB_Clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set uart_rtl_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:uart_rtl:1.0 uart_rtl_0 ]


  # Create ports
  set LeftMotorDirection [ create_bd_port -dir O LeftMotorDirection ]
  set LeftMotorEnable [ create_bd_port -dir O LeftMotorEnable ]
  set LeftMotorEncoder_A [ create_bd_port -dir I LeftMotorEncoder_A ]
  set LeftMotorEncoder_B [ create_bd_port -dir I LeftMotorEncoder_B ]
  set RGB1_Blue_0 [ create_bd_port -dir O RGB1_Blue_0 ]
  set RGB1_Green_0 [ create_bd_port -dir O RGB1_Green_0 ]
  set RGB1_Red_0 [ create_bd_port -dir O RGB1_Red_0 ]
  set RGB2_Blue_0 [ create_bd_port -dir O RGB2_Blue_0 ]
  set RGB2_Green_0 [ create_bd_port -dir O RGB2_Green_0 ]
  set RGB2_Red_0 [ create_bd_port -dir O RGB2_Red_0 ]
  set RightMotorDirection [ create_bd_port -dir O RightMotorDirection ]
  set RightMotorEnable [ create_bd_port -dir O RightMotorEnable ]
  set RightMotorEncoder_A [ create_bd_port -dir I RightMotorEncoder_A ]
  set RightMotorEncoder_B [ create_bd_port -dir I RightMotorEncoder_B ]
  set an_0 [ create_bd_port -dir O -from 7 -to 0 an_0 ]
  set btnC_0 [ create_bd_port -dir I btnC_0 ]
  set btnD_0 [ create_bd_port -dir I btnD_0 ]
  set btnL_0 [ create_bd_port -dir I btnL_0 ]
  set btnR_0 [ create_bd_port -dir I btnR_0 ]
  set btnU_0 [ create_bd_port -dir I btnU_0 ]
  set clk_100MHz [ create_bd_port -dir I -type clk -freq_hz 100000000 clk_100MHz ]
  set dp_0 [ create_bd_port -dir O dp_0 ]
  set encA_0 [ create_bd_port -dir I encA_0 ]
  set encBTN_0 [ create_bd_port -dir I encBTN_0 ]
  set encB_0 [ create_bd_port -dir I encB_0 ]
  set encSWT_0 [ create_bd_port -dir I encSWT_0 ]
  set led_0 [ create_bd_port -dir O -from 15 -to 0 led_0 ]
  set resetn [ create_bd_port -dir I -type rst resetn ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] $resetn
  set seg_0 [ create_bd_port -dir O -from 6 -to 0 seg_0 ]
  set sw_0 [ create_bd_port -dir I -from 15 -to 0 sw_0 ]

  # Create instance: PmodENC544_0, and set properties
  set PmodENC544_0 [ create_bd_cell -type ip -vlnv pdx.edu:user:PmodENC544:1.0 PmodENC544_0 ]

  # Create instance: axi_timebase_wdt_0, and set properties
  set axi_timebase_wdt_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_timebase_wdt:3.0 axi_timebase_wdt_0 ]
  set_property -dict [ list \
   CONFIG.C_WDT_INTERVAL {29} \
 ] $axi_timebase_wdt_0

  # Create instance: axi_uartlite_0, and set properties
  set axi_uartlite_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_uartlite:2.0 axi_uartlite_0 ]

  # Create instance: clk_wiz_1, and set properties
  set clk_wiz_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_1 ]
  set_property -dict [ list \
   CONFIG.CLKIN2_JITTER_PS {166.66} \
   CONFIG.CLKOUT2_JITTER {130.958} \
   CONFIG.CLKOUT2_PHASE_ERROR {98.575} \
   CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {100.000} \
   CONFIG.CLKOUT2_USED {true} \
   CONFIG.CLK_OUT2_PORT {clkPWM_100MHz} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.000} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {10} \
   CONFIG.NUM_OUT_CLKS {2} \
   CONFIG.PRIM_SOURCE {Single_ended_clock_capable_pin} \
   CONFIG.RESET_PORT {resetn} \
   CONFIG.RESET_TYPE {ACTIVE_LOW} \
   CONFIG.SECONDARY_SOURCE {Single_ended_clock_capable_pin} \
   CONFIG.USE_INCLK_SWITCHOVER {false} \
 ] $clk_wiz_1

  # Create instance: fit_timer_0, and set properties
  set fit_timer_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:fit_timer:2.0 fit_timer_0 ]
  set_property -dict [ list \
   CONFIG.C_NO_CLOCKS {50000000} \
 ] $fit_timer_0

  # Create instance: mdm_1, and set properties
  set mdm_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mdm:3.2 mdm_1 ]
  set_property -dict [ list \
   CONFIG.C_ADDR_SIZE {32} \
   CONFIG.C_M_AXI_ADDR_WIDTH {32} \
   CONFIG.C_USE_UART {1} \
 ] $mdm_1

  # Create instance: microblaze_0, and set properties
  set microblaze_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze:11.0 microblaze_0 ]
  set_property -dict [ list \
   CONFIG.C_DEBUG_ENABLED {1} \
   CONFIG.C_D_AXI {1} \
   CONFIG.C_D_LMB {1} \
   CONFIG.C_I_LMB {1} \
 ] $microblaze_0

  # Create instance: microblaze_0_axi_intc, and set properties
  set microblaze_0_axi_intc [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc:4.1 microblaze_0_axi_intc ]
  set_property -dict [ list \
   CONFIG.C_HAS_FAST {1} \
 ] $microblaze_0_axi_intc

  # Create instance: microblaze_0_axi_periph, and set properties
  set microblaze_0_axi_periph [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 microblaze_0_axi_periph ]
  set_property -dict [ list \
   CONFIG.NUM_MI {9} \
 ] $microblaze_0_axi_periph

  # Create instance: microblaze_0_local_memory
  create_hier_cell_microblaze_0_local_memory [current_bd_instance .] microblaze_0_local_memory

  # Create instance: microblaze_0_xlconcat, and set properties
  set microblaze_0_xlconcat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat:2.1 microblaze_0_xlconcat ]

  # Create instance: myHB3ip_0, and set properties
  set myHB3ip_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:myHB3ip:1.0 myHB3ip_0 ]

  # Create instance: myHB3ip_1, and set properties
  set myHB3ip_1 [ create_bd_cell -type ip -vlnv xilinx.com:user:myHB3ip:1.0 myHB3ip_1 ]

  # Create instance: nexys4io_0, and set properties
  set nexys4io_0 [ create_bd_cell -type ip -vlnv pdx.edu:user:nexys4io:3_0 nexys4io_0 ]

  # Create instance: proc_sys_reset_0, and set properties
  set proc_sys_reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_0 ]

  # Create instance: rst_clk_wiz_1_100M, and set properties
  set rst_clk_wiz_1_100M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_clk_wiz_1_100M ]

  # Create interface connections
  connect_bd_intf_net -intf_net axi_uartlite_0_UART [get_bd_intf_ports uart_rtl_0] [get_bd_intf_pins axi_uartlite_0/UART]
  connect_bd_intf_net -intf_net microblaze_0_axi_dp [get_bd_intf_pins microblaze_0/M_AXI_DP] [get_bd_intf_pins microblaze_0_axi_periph/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M02_AXI [get_bd_intf_pins axi_timebase_wdt_0/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M02_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M03_AXI [get_bd_intf_pins axi_uartlite_0/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M03_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M04_AXI [get_bd_intf_pins microblaze_0_axi_periph/M04_AXI] [get_bd_intf_pins nexys4io_0/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M05_AXI [get_bd_intf_pins PmodENC544_0/S00_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M05_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M06_AXI [get_bd_intf_pins microblaze_0_axi_periph/M06_AXI] [get_bd_intf_pins myHB3ip_1/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M08_AXI [get_bd_intf_pins microblaze_0_axi_periph/M08_AXI] [get_bd_intf_pins myHB3ip_0/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_debug [get_bd_intf_pins mdm_1/MBDEBUG_0] [get_bd_intf_pins microblaze_0/DEBUG]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_1 [get_bd_intf_pins microblaze_0/DLMB] [get_bd_intf_pins microblaze_0_local_memory/DLMB]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_1 [get_bd_intf_pins microblaze_0/ILMB] [get_bd_intf_pins microblaze_0_local_memory/ILMB]
  connect_bd_intf_net -intf_net microblaze_0_intc_axi [get_bd_intf_pins microblaze_0_axi_intc/s_axi] [get_bd_intf_pins microblaze_0_axi_periph/M00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_interrupt [get_bd_intf_pins microblaze_0/INTERRUPT] [get_bd_intf_pins microblaze_0_axi_intc/interrupt]
  connect_bd_intf_net -intf_net microblaze_0_mdm_axi [get_bd_intf_pins mdm_1/S_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M01_AXI]

  # Create port connections
  connect_bd_net -net SA_1 [get_bd_ports LeftMotorEncoder_A] [get_bd_pins myHB3ip_0/tachA]
  connect_bd_net -net axi_timebase_wdt_0_wdt_interrupt [get_bd_pins axi_timebase_wdt_0/wdt_interrupt] [get_bd_pins microblaze_0_xlconcat/In0]
  connect_bd_net -net axi_timebase_wdt_0_wdt_reset [get_bd_pins axi_timebase_wdt_0/wdt_reset] [get_bd_pins rst_clk_wiz_1_100M/aux_reset_in]
  connect_bd_net -net btnC_0_1 [get_bd_ports btnC_0] [get_bd_pins nexys4io_0/btnC]
  connect_bd_net -net btnD_0_1 [get_bd_ports btnD_0] [get_bd_pins nexys4io_0/btnD]
  connect_bd_net -net btnL_0_1 [get_bd_ports btnL_0] [get_bd_pins nexys4io_0/btnL]
  connect_bd_net -net btnR_0_1 [get_bd_ports btnR_0] [get_bd_pins nexys4io_0/btnR]
  connect_bd_net -net btnU_0_1 [get_bd_ports btnU_0] [get_bd_pins nexys4io_0/btnU]
  connect_bd_net -net clk_100MHz_1 [get_bd_ports clk_100MHz] [get_bd_pins clk_wiz_1/clk_in1]
  connect_bd_net -net clk_wiz_1_clkPWM_100MHz [get_bd_pins clk_wiz_1/clkPWM_100MHz] [get_bd_pins proc_sys_reset_0/slowest_sync_clk]
  connect_bd_net -net clk_wiz_1_locked [get_bd_pins clk_wiz_1/locked] [get_bd_pins rst_clk_wiz_1_100M/dcm_locked]
  connect_bd_net -net encA_0_1 [get_bd_ports encA_0] [get_bd_pins PmodENC544_0/encA]
  connect_bd_net -net encBTN_0_1 [get_bd_ports encBTN_0] [get_bd_pins PmodENC544_0/encBTN]
  connect_bd_net -net encB_0_1 [get_bd_ports encB_0] [get_bd_pins PmodENC544_0/encB]
  connect_bd_net -net encSWT_0_1 [get_bd_ports encSWT_0] [get_bd_pins PmodENC544_0/encSWT]
  connect_bd_net -net fit_timer_0_Interrupt [get_bd_pins fit_timer_0/Interrupt] [get_bd_pins microblaze_0_xlconcat/In1]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins mdm_1/Debug_SYS_Rst] [get_bd_pins rst_clk_wiz_1_100M/mb_debug_sys_rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins PmodENC544_0/s00_axi_aclk] [get_bd_pins axi_timebase_wdt_0/s_axi_aclk] [get_bd_pins axi_uartlite_0/s_axi_aclk] [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins fit_timer_0/Clk] [get_bd_pins mdm_1/S_AXI_ACLK] [get_bd_pins microblaze_0/Clk] [get_bd_pins microblaze_0_axi_intc/processor_clk] [get_bd_pins microblaze_0_axi_intc/s_axi_aclk] [get_bd_pins microblaze_0_axi_periph/ACLK] [get_bd_pins microblaze_0_axi_periph/M00_ACLK] [get_bd_pins microblaze_0_axi_periph/M01_ACLK] [get_bd_pins microblaze_0_axi_periph/M02_ACLK] [get_bd_pins microblaze_0_axi_periph/M03_ACLK] [get_bd_pins microblaze_0_axi_periph/M04_ACLK] [get_bd_pins microblaze_0_axi_periph/M05_ACLK] [get_bd_pins microblaze_0_axi_periph/M06_ACLK] [get_bd_pins microblaze_0_axi_periph/M07_ACLK] [get_bd_pins microblaze_0_axi_periph/M08_ACLK] [get_bd_pins microblaze_0_axi_periph/S00_ACLK] [get_bd_pins microblaze_0_local_memory/LMB_Clk] [get_bd_pins myHB3ip_0/s00_axi_aclk] [get_bd_pins myHB3ip_1/s00_axi_aclk] [get_bd_pins nexys4io_0/RGBLED_Clock] [get_bd_pins nexys4io_0/s00_axi_aclk] [get_bd_pins rst_clk_wiz_1_100M/slowest_sync_clk]
  connect_bd_net -net microblaze_0_intr [get_bd_pins microblaze_0_axi_intc/intr] [get_bd_pins microblaze_0_xlconcat/dout]
  connect_bd_net -net myHB3ip_0_direction [get_bd_ports LeftMotorDirection] [get_bd_pins myHB3ip_0/direction]
  connect_bd_net -net myHB3ip_0_enable [get_bd_ports LeftMotorEnable] [get_bd_pins myHB3ip_0/enable]
  connect_bd_net -net myHB3ip_1_direction [get_bd_ports RightMotorDirection] [get_bd_pins myHB3ip_1/direction]
  connect_bd_net -net myHB3ip_1_enable [get_bd_ports RightMotorEnable] [get_bd_pins myHB3ip_1/enable]
  connect_bd_net -net nexys4io_0_RGB1_Blue [get_bd_ports RGB1_Blue_0] [get_bd_pins nexys4io_0/RGB1_Blue]
  connect_bd_net -net nexys4io_0_RGB1_Green [get_bd_ports RGB1_Green_0] [get_bd_pins nexys4io_0/RGB1_Green]
  connect_bd_net -net nexys4io_0_RGB1_Red [get_bd_ports RGB1_Red_0] [get_bd_pins nexys4io_0/RGB1_Red]
  connect_bd_net -net nexys4io_0_RGB2_Blue [get_bd_ports RGB2_Blue_0] [get_bd_pins nexys4io_0/RGB2_Blue]
  connect_bd_net -net nexys4io_0_RGB2_Green [get_bd_ports RGB2_Green_0] [get_bd_pins nexys4io_0/RGB2_Green]
  connect_bd_net -net nexys4io_0_RGB2_Red [get_bd_ports RGB2_Red_0] [get_bd_pins nexys4io_0/RGB2_Red]
  connect_bd_net -net nexys4io_0_an [get_bd_ports an_0] [get_bd_pins nexys4io_0/an]
  connect_bd_net -net nexys4io_0_dp [get_bd_ports dp_0] [get_bd_pins nexys4io_0/dp]
  connect_bd_net -net nexys4io_0_led [get_bd_ports led_0] [get_bd_pins nexys4io_0/led]
  connect_bd_net -net nexys4io_0_seg [get_bd_ports seg_0] [get_bd_pins nexys4io_0/seg]
  connect_bd_net -net proc_sys_reset_0_peripheral_aresetn [get_bd_pins microblaze_0_axi_periph/M08_ARESETN] [get_bd_pins myHB3ip_0/s00_axi_aresetn] [get_bd_pins myHB3ip_1/s00_axi_aresetn] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
  connect_bd_net -net proc_sys_reset_0_peripheral_reset [get_bd_pins fit_timer_0/Rst] [get_bd_pins proc_sys_reset_0/peripheral_reset]
  connect_bd_net -net reset_rtl_0_1 [get_bd_ports resetn] [get_bd_pins clk_wiz_1/resetn] [get_bd_pins proc_sys_reset_0/ext_reset_in] [get_bd_pins rst_clk_wiz_1_100M/ext_reset_in]
  connect_bd_net -net rst_clk_wiz_1_100M_bus_struct_reset [get_bd_pins microblaze_0_local_memory/SYS_Rst] [get_bd_pins rst_clk_wiz_1_100M/bus_struct_reset]
  connect_bd_net -net rst_clk_wiz_1_100M_mb_reset [get_bd_pins microblaze_0/Reset] [get_bd_pins microblaze_0_axi_intc/processor_rst] [get_bd_pins rst_clk_wiz_1_100M/mb_reset]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins PmodENC544_0/s00_axi_aresetn] [get_bd_pins axi_timebase_wdt_0/s_axi_aresetn] [get_bd_pins axi_uartlite_0/s_axi_aresetn] [get_bd_pins mdm_1/S_AXI_ARESETN] [get_bd_pins microblaze_0_axi_intc/s_axi_aresetn] [get_bd_pins microblaze_0_axi_periph/ARESETN] [get_bd_pins microblaze_0_axi_periph/M00_ARESETN] [get_bd_pins microblaze_0_axi_periph/M01_ARESETN] [get_bd_pins microblaze_0_axi_periph/M02_ARESETN] [get_bd_pins microblaze_0_axi_periph/M03_ARESETN] [get_bd_pins microblaze_0_axi_periph/M04_ARESETN] [get_bd_pins microblaze_0_axi_periph/M05_ARESETN] [get_bd_pins microblaze_0_axi_periph/M06_ARESETN] [get_bd_pins microblaze_0_axi_periph/M07_ARESETN] [get_bd_pins microblaze_0_axi_periph/S00_ARESETN] [get_bd_pins nexys4io_0/s00_axi_aresetn] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
  connect_bd_net -net sw_0_1 [get_bd_ports sw_0] [get_bd_pins nexys4io_0/sw]
  connect_bd_net -net tachA_0_1 [get_bd_ports RightMotorEncoder_A] [get_bd_pins myHB3ip_1/tachA]
  connect_bd_net -net tachB_0_1 [get_bd_ports LeftMotorEncoder_B] [get_bd_pins myHB3ip_0/tachB]
  connect_bd_net -net tachB_0_2 [get_bd_ports RightMotorEncoder_B] [get_bd_pins myHB3ip_1/tachB]

  # Create address segments
  assign_bd_address -offset 0x44A10000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs PmodENC544_0/S00_AXI/S00_AXI_reg] -force
  assign_bd_address -offset 0x41A00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_timebase_wdt_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x40600000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_uartlite_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00000000 -range 0x00020000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs microblaze_0_local_memory/dlmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x00000000 -range 0x00020000 -target_address_space [get_bd_addr_spaces microblaze_0/Instruction] [get_bd_addr_segs microblaze_0_local_memory/ilmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x41400000 -range 0x00001000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs mdm_1/S_AXI/Reg] -force
  assign_bd_address -offset 0x41200000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs microblaze_0_axi_intc/S_AXI/Reg] -force
  assign_bd_address -offset 0x44A30000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs myHB3ip_0/S00_AXI/S00_AXI_reg] -force
  assign_bd_address -offset 0x44A20000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs myHB3ip_1/S00_AXI/S00_AXI_reg] -force
  assign_bd_address -offset 0x44A00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs nexys4io_0/S00_AXI/S00_AXI_reg] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.549719",
   "Default View_TopLeft":"1186,-204",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0.21  2019-05-29 bk=1.5064 VDI=41 GEI=36 GUI=JA:9.0 non-TLS
#  -string -flagsOSRD
preplace port uart_rtl_0 -pg 1 -lvl 9 -x 2880 -y 430 -defaultsOSRD
preplace port LeftMotorDirection -pg 1 -lvl 9 -x 2880 -y 270 -defaultsOSRD
preplace port LeftMotorEnable -pg 1 -lvl 9 -x 2880 -y 300 -defaultsOSRD
preplace port RGB1_Blue_0 -pg 1 -lvl 9 -x 2880 -y 600 -defaultsOSRD
preplace port RGB1_Green_0 -pg 1 -lvl 9 -x 2880 -y 570 -defaultsOSRD
preplace port RGB1_Red_0 -pg 1 -lvl 9 -x 2880 -y 540 -defaultsOSRD
preplace port RGB2_Blue_0 -pg 1 -lvl 9 -x 2880 -y 690 -defaultsOSRD
preplace port RGB2_Green_0 -pg 1 -lvl 9 -x 2880 -y 660 -defaultsOSRD
preplace port RGB2_Red_0 -pg 1 -lvl 9 -x 2880 -y 630 -defaultsOSRD
preplace port LeftMotorEncoder_A -pg 1 -lvl 0 -x -30 -y 130 -defaultsOSRD
preplace port LeftMotorEncoder_B -pg 1 -lvl 0 -x -30 -y 160 -defaultsOSRD
preplace port btnC_0 -pg 1 -lvl 0 -x -30 -y 760 -defaultsOSRD
preplace port btnD_0 -pg 1 -lvl 0 -x -30 -y 670 -defaultsOSRD
preplace port btnL_0 -pg 1 -lvl 0 -x -30 -y 730 -defaultsOSRD
preplace port btnR_0 -pg 1 -lvl 0 -x -30 -y 700 -defaultsOSRD
preplace port btnU_0 -pg 1 -lvl 0 -x -30 -y 640 -defaultsOSRD
preplace port clk_100MHz -pg 1 -lvl 0 -x -30 -y 950 -defaultsOSRD
preplace port dp_0 -pg 1 -lvl 9 -x 2880 -y 750 -defaultsOSRD
preplace port encA_0 -pg 1 -lvl 0 -x -30 -y 1130 -defaultsOSRD
preplace port encBTN_0 -pg 1 -lvl 0 -x -30 -y 1240 -defaultsOSRD
preplace port encB_0 -pg 1 -lvl 0 -x -30 -y 1160 -defaultsOSRD
preplace port encSWT_0 -pg 1 -lvl 0 -x -30 -y 1270 -defaultsOSRD
preplace port resetn -pg 1 -lvl 0 -x -30 -y 920 -defaultsOSRD
preplace port RightMotorDirection -pg 1 -lvl 9 -x 2880 -y 90 -defaultsOSRD
preplace port RightMotorEnable -pg 1 -lvl 9 -x 2880 -y 120 -defaultsOSRD
preplace port RightMotorEncoder_A -pg 1 -lvl 0 -x -30 -y 70 -defaultsOSRD
preplace port RightMotorEncoder_B -pg 1 -lvl 0 -x -30 -y 100 -defaultsOSRD
preplace portBus an_0 -pg 1 -lvl 9 -x 2880 -y 780 -defaultsOSRD
preplace portBus led_0 -pg 1 -lvl 9 -x 2880 -y 510 -defaultsOSRD
preplace portBus seg_0 -pg 1 -lvl 9 -x 2880 -y 720 -defaultsOSRD
preplace portBus sw_0 -pg 1 -lvl 0 -x -30 -y 790 -defaultsOSRD
preplace inst PmodENC544_0 -pg 1 -lvl 8 -x 2690 -y 1090 -defaultsOSRD
preplace inst axi_timebase_wdt_0 -pg 1 -lvl 8 -x 2690 -y 870 -defaultsOSRD
preplace inst axi_uartlite_0 -pg 1 -lvl 8 -x 2690 -y 440 -defaultsOSRD
preplace inst clk_wiz_1 -pg 1 -lvl 1 -x 140 -y 940 -defaultsOSRD
preplace inst fit_timer_0 -pg 1 -lvl 3 -x 760 -y 1040 -defaultsOSRD
preplace inst mdm_1 -pg 1 -lvl 5 -x 1420 -y 870 -defaultsOSRD
preplace inst microblaze_0 -pg 1 -lvl 6 -x 1810 -y 860 -defaultsOSRD
preplace inst microblaze_0_axi_intc -pg 1 -lvl 5 -x 1420 -y 1150 -defaultsOSRD
preplace inst microblaze_0_axi_periph -pg 1 -lvl 7 -x 2250 -y 420 -defaultsOSRD
preplace inst microblaze_0_local_memory -pg 1 -lvl 7 -x 2250 -y 870 -defaultsOSRD
preplace inst microblaze_0_xlconcat -pg 1 -lvl 4 -x 1060 -y 1080 -defaultsOSRD
preplace inst nexys4io_0 -pg 1 -lvl 8 -x 2690 -y 650 -defaultsOSRD
preplace inst proc_sys_reset_0 -pg 1 -lvl 2 -x 450 -y 850 -defaultsOSRD
preplace inst rst_clk_wiz_1_100M -pg 1 -lvl 4 -x 1060 -y 880 -defaultsOSRD
preplace inst myHB3ip_0 -pg 1 -lvl 8 -x 2690 -y 280 -defaultsOSRD
preplace inst myHB3ip_1 -pg 1 -lvl 8 -x 2690 -y 100 -defaultsOSRD
preplace netloc SA_1 1 0 8 NJ 130 NJ 130 NJ 130 NJ 130 NJ 130 NJ 130 NJ 130 2530J
preplace netloc axi_timebase_wdt_0_wdt_interrupt 1 3 6 880 990 1260J 970 NJ 970 NJ 970 NJ 970 2840
preplace netloc axi_timebase_wdt_0_wdt_reset 1 3 6 870 760 NJ 760 NJ 760 NJ 760 2390J 960 2820
preplace netloc btnC_0_1 1 0 8 0J 730 NJ 730 NJ 730 NJ 730 NJ 730 NJ 730 NJ 730 2540J
preplace netloc btnD_0_1 1 0 8 -10J 30 NJ 30 NJ 30 NJ 30 NJ 30 NJ 30 NJ 30 2540J
preplace netloc btnL_0_1 1 0 8 -10J 720 NJ 720 NJ 720 NJ 720 NJ 720 NJ 720 NJ 720 2430J
preplace netloc btnR_0_1 1 0 8 10J 40 NJ 40 NJ 40 NJ 40 NJ 40 NJ 40 NJ 40 2520J
preplace netloc btnU_0_1 1 0 8 0J 90 NJ 90 NJ 90 NJ 90 NJ 90 NJ 90 NJ 90 2500J
preplace netloc clk_100MHz_1 1 0 1 NJ 950
preplace netloc clk_wiz_1_clkPWM_100MHz 1 1 1 270 810n
preplace netloc clk_wiz_1_locked 1 1 3 NJ 960 NJ 960 870
preplace netloc encA_0_1 1 0 8 NJ 1130 NJ 1130 NJ 1130 870J 1260 NJ 1260 NJ 1260 NJ 1260 2540J
preplace netloc encBTN_0_1 1 0 8 0J 1110 NJ 1110 NJ 1110 870J 1010 NJ 1010 NJ 1010 NJ 1010 2390J
preplace netloc encB_0_1 1 0 8 -10J 1020 NJ 1020 660J 970 870J 980 NJ 980 NJ 980 NJ 980 2410J
preplace netloc encSWT_0_1 1 0 8 20J 1120 NJ 1120 NJ 1120 860J 1000 NJ 1000 NJ 1000 NJ 1000 2400J
preplace netloc fit_timer_0_Interrupt 1 3 1 850 1040n
preplace netloc mdm_1_debug_sys_rst 1 3 3 880 770 NJ 770 1550
preplace netloc microblaze_0_Clk 1 1 7 260 750 650 830 850 780 1250 790 1570 950 2060 50 2470
preplace netloc microblaze_0_intr 1 4 1 1230 1080n
preplace netloc myHB3ip_0_direction 1 8 1 NJ 270
preplace netloc myHB3ip_0_enable 1 8 1 2820J 290n
preplace netloc nexys4io_0_RGB1_Blue 1 8 1 2850J 600n
preplace netloc nexys4io_0_RGB1_Green 1 8 1 2840J 570n
preplace netloc nexys4io_0_RGB1_Red 1 8 1 2830J 540n
preplace netloc nexys4io_0_RGB2_Blue 1 8 1 2840J 680n
preplace netloc nexys4io_0_RGB2_Green 1 8 1 NJ 660
preplace netloc nexys4io_0_RGB2_Red 1 8 1 2830J 630n
preplace netloc nexys4io_0_an 1 8 1 2820J 740n
preplace netloc nexys4io_0_dp 1 8 1 2840J 720n
preplace netloc nexys4io_0_led 1 8 1 2820J 510n
preplace netloc nexys4io_0_seg 1 8 1 2850J 700n
preplace netloc proc_sys_reset_0_peripheral_aresetn 1 2 6 620J 710 NJ 710 NJ 710 NJ 710 2040 70 2550
preplace netloc proc_sys_reset_0_peripheral_reset 1 2 1 630 850n
preplace netloc reset_rtl_0_1 1 0 4 10 860 280 950 640J 860 NJ
preplace netloc rst_clk_wiz_1_100M_bus_struct_reset 1 4 3 1260J 960 NJ 960 2080
preplace netloc rst_clk_wiz_1_100M_mb_reset 1 4 2 1240 950 1560
preplace netloc rst_clk_wiz_1_100M_peripheral_aresetn 1 4 4 1270 600 NJ 600 2080 120 2440
preplace netloc sw_0_1 1 0 8 20J 740 NJ 740 NJ 740 NJ 740 NJ 740 NJ 740 NJ 740 2390J
preplace netloc tachB_0_1 1 0 8 NJ 160 NJ 160 NJ 160 NJ 160 NJ 160 NJ 160 2070J 140 2510J
preplace netloc myHB3ip_1_direction 1 8 1 NJ 90
preplace netloc myHB3ip_1_enable 1 8 1 2820J 110n
preplace netloc tachA_0_1 1 0 8 20J 80 NJ 80 NJ 80 NJ 80 NJ 80 NJ 80 NJ 80 NJ
preplace netloc tachB_0_2 1 0 8 NJ 100 NJ 100 NJ 100 NJ 100 1240J 110 NJ 110 NJ 110 2440J
preplace netloc microblaze_0_axi_dp 1 6 1 2050 200n
preplace netloc axi_uartlite_0_UART 1 8 1 NJ 430
preplace netloc microblaze_0_mdm_axi 1 4 4 1290 100 NJ 100 NJ 100 2390
preplace netloc microblaze_0_axi_periph_M05_AXI 1 7 1 2420 440n
preplace netloc microblaze_0_intc_axi 1 4 4 1280 60 NJ 60 NJ 60 2420
preplace netloc microblaze_0_axi_periph_M02_AXI 1 7 1 2460 380n
preplace netloc microblaze_0_dlmb_1 1 6 1 N 840
preplace netloc microblaze_0_ilmb_1 1 6 1 N 860
preplace netloc microblaze_0_axi_periph_M03_AXI 1 7 1 2490 400n
preplace netloc microblaze_0_debug 1 5 1 N 850
preplace netloc microblaze_0_axi_periph_M08_AXI 1 7 1 2450 240n
preplace netloc microblaze_0_axi_periph_M04_AXI 1 7 1 2480 420n
preplace netloc microblaze_0_interrupt 1 5 1 1580 830n
preplace netloc microblaze_0_axi_periph_M06_AXI 1 7 1 2430 60n
levelinfo -pg 1 -30 140 450 760 1060 1420 1810 2250 2690 2880
pagesize -pg 1 -db -bbox -sgen -220 0 3060 1290
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_embsys()
cr_bd_embsys ""
set_property REGISTERED_WITH_MANAGER "1" [get_files embsys.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files embsys.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a100tcsg324-1 -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a100tcsg324-1 -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xc7a100tcsg324-1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.phys_opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
